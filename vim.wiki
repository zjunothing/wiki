=== Help ===
[[ http://vimdoc.sourceforge.net/htmldoc/ | html doc ]]
{{{ 
:h              # open help.txt, read it!
}}}


=== motion (cursor motion, movement) ===
{{{
c-o         # back to previous location

}}}

=== macro ===
{{{ 
qa          # start recording to register a
q           # stop recording.
@a          # execute your macro
@@          # execute macro again
:reg        # see your macro at register a

:'<,'> nor @a   # 在选中的行上执行宏 a
}}}

=== marks ===
{{{
mx          # set mark to x
:marks      # list marks
'x          # goto mark x
``          # 最近两处来回跳
}}}

=== fold ===
{{{
:h fold     # see fold help
zo, zO      # open fold/ recursively ,   charactor 'z' just like a folded note
zc, zC      # close fold/ recursively
}}}


=== window ===
{{{
c-w j/i/j/k     # move between window
c-w v/s         # vertical/horizontal split
c-w c           # close current window
c-w o           # close all other window except current
c-w r           # rotate window

c-ww            # 窗口循环切换

# 调整窗口大小
c-w +/-         # 水平窗口高度增加/减少
c-w >/<         # 竖直窗口宽度增加，减少
20c-w >         # 拓宽20列 

c-w =           # 所有窗口等宽
}}}

=== tab ===
{{{
# 不过有了 tmux 之后，可以忽略掉 vim 的 tab 了。 

:tabe      # new tab. (for tem editing, without change current window display)
:tabe %    # open new tab, show current file
:Te        # open new tab, show current dir

gt, gT     # go to next/previous tab
3gt        # go to tab3 
c-w T      # move current window to a new tab.  c-w is window chose

:tabm +3   # move tab 3 place to right
}}}


=== buffer ===
{{{

:ls         # 列出当前缓冲区
------
1 #h   ".vim/vimrcs/basic.vim"        line 355
2  h   "~/buffer"                     line 1
3 %a + "data.csv"                     line 1
------
#  % 表示当前哪个文件在窗口可见
#  # 表示轮换文件，可用 C-^ 来轮换
#  a 表示 active， h 表示 hide

:bn,bp          # next/previous buffer
:b3             # 跳到3号 buffer，每个 buffer 有编号
:b keyword tab  #'缓存关键字，然后 tab 选择'
]b,[b           # normal mode next/previous buffer





}}}


=== emacs for cli ===
{{{
c-p, c-n            # previous line, next line.  cli: preview/next command
c-f, c-b            # forward/backword a char
c-d                 # delete current
c-a, c-e            # go begin/end of line]
M-f, M-b            # forword/backword a word (M:alt)
}}}


=== ex command ===
{{{
q:              # open up ex-command history, and then you can choose history and run it.
@:              # 重复上次的 ex command

C-z             # go outside to CLT, fg to bring back.
fg              # fg 是 job control 中的命令，不加参数表示将上一个 background 的 job 拿到 FrondGround
!!<cmd>         # 插入命令运行的结果
!<cmd>          # 临时运行一次 cmd

:=                      # 查看文件总行数
:set nu                 # show line number
:set nonu               # hide line number

:3,6d                   # delete 3~6 line`
:3,5s/hello/hi          # 3到5行，substitute hello to hi
:%s/hello/hi/g          # % 表示当前文件，整个文件替换 hello 到 hi

:[range]m{address}      # move the range line to the address
:3,5m14                 # move 3~6 after 14
:[range]t{address}      # bring to address
:6t.                    # 将第六行复制到当前行, t is alias for co

:3,6w abc.txt           # 3~6 line, write to abc.txt
:9,13w >>abc.txt        # 将9-13行追加到文件abc.txt后面
:r abc                  # 将abc 文件的内容追到到当前文件光标后

:g/pattern/nu           # 搜索所有满足pattern的地方，带行号显示出来
12Gyy <C-o>p            # 跳到12行复制，然后再跳回来粘贴, <C-o> 来回跳
:%norm A;               # 在所有行未加添加分号。 %：所有行， norm 运行normal命令A;  
:%norm .                # 全文执行上次 norm 模式下的命令
:%norm @q
高亮选择文本，然后按 :  # 在高亮全区内执行ex。'< 表示选取首行，'> 表示选取尾行
}}}

=== search & replace ===
{{{
q/                                      # view and recall search
:%s/\s\+$//g                            # 删除行尾空格 \s表示空格， \+表示多个
:%s/^\s+//g                             # 删除行首空格 
:1,10s/foo/bar/g                        # 1到10行替换。 1,10换成% 就表示整个文件（1，$）
}}}

=== register ===
[[ http://usevim.com/2012/04/13/registers/| register 101 ]]
{{{
"                   # unamed register, delete or yank will fill this register
0                   # yank register
.                   # what i just typed（read only）
:                   # 上次执行的命令
*                   # clipboard
%                   # 当前文件，当前 buffer
/                   # 上次搜索
<C-r>{register}     # 在插入模式下，读入寄存器中的内容
<C-r>=    # 访问表达式寄存器(expression register)
}}}

=== vim 多文件、缓冲区 ===
{{{
:ls 查看缓冲区的所有文件
# 其中%表示当前文件、# 表示轮换文件。 可以用 C-^ 来回切换。
# 文件前有数字编号，可用 b {number} 快速定位
:bn # 下一文件
:bp # 上一文件
:bufdo bd   # 快速关闭所有 buf

:args ~/aeuic/**/pom.xml  # 打开所有 aeuic下的 pom 到缓冲区

:wa(ll)     # 保存所有 buf 的修改
}}}


=== vim 多窗口、多tag ===
{{{
# 多个窗口共享 buf
c-w v           # 新启垂直窗口, 可以用 :e {filepath} 开始编辑新的文件
c-w j,i,j,k     # 窗口之间切换
c-w o           # 只保留当前窗口

# 多个 tab 也共享 buf； 看来 buf 是 vim 启动后，全局共享的
:tabedit {filename}   # 新启一个 tab（一个 tab 是多个窗口的容器）
:gt,gT                # tab 切换

# 总结，以后item 中只要给 vim 开一个 tab 就够啦。
}}}


=== vim diff ===
{{{
dp             diffput: puts changes under the cursor into the other file
                        making them identical (thus removing the diff).
do             diffget: (o => obtain). The change under the cursor is replaced
                        by the content of the other file making them identical.

]c             Jump to the next diff
[c             Jump to the previous diff
}}}

=== vim little tip===
{{{
:%! python -mjson.tool      # mjson module-json 格式化. % 全文；  ！执行命令 
:% norm A;                  # 全文所有行 末尾 加上分号

}}}

=== vim chrome ===
1. ? to trigger helps 
2. [[https://github.com/philc/vimium/issues/840 | how to lost focus from address]]


=== useful links ===
[[http://thedarnedestthing.com/grokking%20vim | grokking vim ]]

[[http://www.fprintf.net/vimCheatSheet.html | vim command cheetsheet]]

[[ http://segmentfault.com/u/nightire/blogs | vim 哲学 ]]

